<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.scijava</groupId>
        <artifactId>pom-scijava</artifactId>
        <version>33.2.0</version>
        <relativePath />
    </parent>

    <groupId>org.ilastik</groupId>
    <artifactId>ilastik4ij</artifactId>
    <version>1.8.3-SNAPSHOT</version>

    <name>ilastik imageJ modules</name>
    <description>These ImageJ plugins wrap ilastik workflows</description>
    <url>https://github.com/ilastik/</url>
    <inceptionYear>2017</inceptionYear>
    <organization>
        <name>ilastik</name>
        <url>ilastik.org</url>
    </organization>
    <licenses>
        <license>
            <name>BSD</name>
            <url />
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>chaubold</id>
            <name>Carsten Haubold</name>
            <url />
        </developer>
        <developer>
            <id>awolny</id>
            <name>Adrian Wolny</name>
            <url />
        </developer>

    </developers>
    <contributors>
        <contributor>
            <name>Carsten Haubold</name>
        </contributor>
    </contributors>

    <mailingLists>
        <mailingList>
            <name>Image.sc Forum</name>
            <archive>https://forum.image.sc/tags/ilastik4ij</archive>
        </mailingList>
    </mailingLists>

    <scm>
        <connection>scm:git:https://github.com/ilastik/ilastik4ij</connection>
        <developerConnection>scm:git:git@github.com:ilastik/ilastik4ij</developerConnection>
        <tag>HEAD</tag>
        <url>https://github.com/ilastik/ilastik4ij</url>
    </scm>
    <issueManagement>
        <system>GitHub Issues</system>
        <url>http://github.com/ilastik/ilastik4ij/issues</url>
    </issueManagement>
    <ciManagement>
        <system>GitHub Actions</system>
        <url>https://github.com/ilastik/ilastik4ij/actions</url>
    </ciManagement>

    <properties>
        <main-class>IlastikPixelClassificationPrediction</main-class>
        <license.licenseName>BSD</license.licenseName>
        <license.copyrightOwners>N/A</license.copyrightOwners>
        <license.projectName>ilastik</license.projectName>
        <releaseProfiles>sign,deploy-to-scijava</releaseProfiles>
        <!-- Name of the uberjar generated by the uberjar profile -->
        <uberjar-classifier>all</uberjar-classifier>
        <!-- Maven plugin for making the uber-jar -->
        <maven-shade-plugin.version>3.2.1</maven-shade-plugin.version>
    </properties>

    <repositories>
        <repository>
            <id>scijava.public</id>
            <url>https://maven.scijava.org/content/groups/public</url>
        </repository>
    </repositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <!--
        The uberjar profile augments the package phase to build an unshaded uber-JAR
        or "fat JAR" using the maven-shade-plugin. The default classifier is "all";
        override the ${uberjar-classifier} property to change it.

        Uber-JARs are convenient for all-in-one distribution of a Java program,
        freeing users from the burden of juggling multiple files and dependencies.
        However, unshaded uberjars are not appropriate for use as dependencies
        themselves, because the uber-JAR's embedded version of each dependency may
        clash with other classpath components relying on those same dependencies.
        It is advised to publish the standard (non-uber) JAR of your component with
        proper dependency declarations as the main artifact, and deploy the uber-JAR
        as a separate classifier.
        -->
        <!-- FIXME: remove after https://github.com/scijava/pom-scijava-base/commit/0e41ce66c8bda172fde7e09fc91904aa7bb84d97 is merged into scijava-base -->
        <profile>
            <id>uberjar</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                                <configuration>
                                    <shadedClassifierName>${uberjar-classifier}</shadedClassifierName>
                                    <createDependencyReducedPom>false</createDependencyReducedPom>
                                    <shadedArtifactAttached>true</shadedArtifactAttached>
                                    <transformers>
                                        <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                            <resource>META-INF/json/org.scijava.plugin.Plugin</resource>
                                        </transformer>
                                    </transformers>
                                    <filters>
                                        <filter>
                                            <!--
                                            Shading signed JARs will fail without this.
                                            http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                                            -->
                                            <artifact>*:*</artifact>
                                            <excludes>
                                                <exclude>META-INF/*.SF</exclude>
                                                <exclude>META-INF/*.DSA</exclude>
                                                <exclude>META-INF/*.RSA</exclude>
                                            </excludes>
                                        </filter>
                                    </filters>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20200518</version>
        </dependency>
        <dependency>
            <groupId>net.imagej</groupId>
            <artifactId>ij</artifactId>
        </dependency>
        <dependency>
            <groupId>net.imagej</groupId>
            <artifactId>imagej-common</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scijava</groupId>
            <artifactId>scijava-common</artifactId>
        </dependency>
        <dependency>
            <groupId>net.imglib2</groupId>
            <artifactId>imglib2</artifactId>
        </dependency>
        <dependency>
            <groupId>net.imglib2</groupId>
            <artifactId>imglib2-ij</artifactId>
        </dependency>
        <dependency>
            <groupId>cisd</groupId>
            <artifactId>jhdf5</artifactId>
        </dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>net.imagej</groupId>
            <artifactId>imagej</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.scif</groupId>
            <artifactId>scifio</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
